#X-Generator: crowdin.com
#default is English, United States (en_US). This is used to store all messages in bagit-java

#for BagitProfileDeserializer.java
fetch_allowed=Sind Fetch Dateien erlaubt? [{}]
serialization_allowed=Serialisierung ist\: [{}]
parsing_bagit_profile_info_section=Lese Abschnitt BagIt-Profile-Info
identifier=Identifier hat den Wert [{}]
source_organization=Source-Organization hat den Wert [{}]
contact_name=Contact-Name hat den Wert [{}]
contact_email=Contact-Email hat den Wert [{}]
external_description=External-Description hat den Wert [{}]
version=Version hat den Wert [{}]
parsing_bag_info=Lese Abschnitt Bag-Info
required_manifest_types=Erforderliche Manifeste {}
acceptable_serialization_mime_types=Akzeptierte MIME Typen f\\u00fcr die Serialisierung sind {}
required_tagmanifest_types=Erforderliche Tag Manifeste sind {}
tag_files_required=Erforderliche Tag Dateien sind {}
acceptable_bagit_versions=Akzeptierte bagit Versionen sind {}

#for BagitWarning.java
bag_within_a_bag=Das Verzeichnis data kann alles beinhalten, inklusive einer anderen bag. Es wird allerdings empfohlen, mehrere bags zusammenzufassen.
different_case=Eine bag kann mehrere Dateien mit unterschiedlicher Gro\\u00df- und Kleinschreibung enthalten. Dies kann zu Problemen mit bestimmten Dateisystemen f\\u00fchren, z.B. mit dem von Apple verwendeten HFS.
different_normalization=Eine bag kann mehrere Dateien mit unterschiedlicher Normalisierung enthalten. Dies kann bei einigen Dateisystemen zu Problemen bei der Verifizierung f\\u00fchren und den Benutzer verwirren.
extra_lines_in_bagit_files=Laut bagit Spezifikation d\\u00fcrfen nur 2 Zeilen enthalten sein. Dennoch haben sich einige Implementierungen daf\\u00fcr entschieden dies zu ignorieren, was zu Kompatibilit\\u00e4tsproblemen f\\u00fchren kann.
leading_dot_slash=Eine Manifest Datei f\\u00fchrt alle Dateien im Verzeichnis data relativ zum Wurzelverzeichnis der bag auf. Daher ist es nicht notwendig, die Dateipfade mit einem Punkt zu beginnen.
non_standard_algorithm=Der verwendete Algorithmus zur Pr\\u00fcfsummenberechnung ist nicht Teil der Standard Java Laufzeitumgebung. Die Verwendung von SHA512 wird empfohlen.
md5sum_tool_generated_manifest=Das Manifest wurde mit Hilfe von Werkzeugen zur Pr\\u00fcfsummenberechnung erstellt, die z.B. Teil des GNU Coreutils Paketes sind (md5sum, sha1sum, etc.), hier als 'md5sum' bezeichnet. Diese erzeugen minimale Unterschiede in den erstellten Manifesten, was zu Problemen mit einigen Implementierungen f\\u00fchren kann.
missing_tag_manifest=Das Tag Manifest verhindert unvollst\\u00e4ndige Payload Manifeste sowie andere potentielle Probleme. Daher wird empfohlen, dass es Teil jeder bag ist.
old_bagit_version=Die verwendete Version der bagit Spezifikation ist veraltet. Es wird empfohlen, auf die aktuellste Version zu umzusteigen.
os_specific_files=Dateien die vom Betriebssystem f\\u00fcr eigene Zwecke erzeugt wurden. Diese sind nicht zwischen verschiedenen Betriebssystemversionen portierbar und sollten nicht im Manifest aufgef\\u00fchrt werden. Beispiele hierf\\u00fcr sind Thumbs.db unter Windows oder .DS_Store unter OS X.
payload_oxum_missing=Es wird empfohlen, die Eigenschaft Payload-Oxum in den Metadaten jeder bag zu hinterlegen, da diese eine schnelle \\u00dcberpr\\u00fcfung der bag erlaubt.
tag_files_encoding=Es wird empfohlen UTF-8 zu verwenden.
weak_checksum_algorithm=Der verwendete Algorithmus zur Pr\\u00fcfsummenerzeugung ist angreifbar. Wir empfehlen die Verwendung von SHA-512.

#for BagLinter.java
checking_encoding_problems=Pr\\u00fcfe auf Probleme mit der Zeichenkodierung.
checking_latest_version=Pr\\u00fcfe auf aktuellste Version.
checking_manifest_problems=Pr\\u00fcfe Manifeste auf Probleme.
checking_metadata_problems=Pr\\u00fcfe bag Metadaten auf Probleme.
skipping_check_extra_lines=\\u00dcberspringe Pr\\u00fcfung auf Extrazeilen in bagit Dateien.
checking_extra_lines=Pr\\u00fcfe ob [{}] mehr als 2 Zeilen enth\\u00e4lt.
extra_lines_warning=The bagit Spezifikation sagt aus, dass bagit.txt genau 2 Zeilen enthalten darf. Die vorliegende bagit.txt enth\\u00e4lt [{}] Zeilen. Dies kann von einigen Implementierungen ignoriert werden oder zu Kombatibilit\\u00e4tsproblemen f\\u00fchren.

#for BagProfileChecker.java
checking_fetch_file_allowed=Pr\\u00fcfe ob Fetch Dateien f\\u00fcr die bag [{}] erlaubt sind.
checking_metadata_entry_required=Pr\\u00fcfe ob [{}] in den bag Metadaten ben\\u00f6tigt wird.
check_values_acceptable=Pr\\u00fcfe ob alle f\\u00fcr [{}] aufgef\\u00fchrten Werte akzeptiert werden k\\u00f6nnen.
check_required_manifests_present=Pr\\u00fcfe ob alle ben\\u00f6tigten Manifeste vorhanden sind.
required_tag_manifest_type_not_present=Ben\\u00f6tigtes Tag Manifest vom Typ [{}] konnte nicht gefunden werden.
required_manifest_type_not_present=Ben\\u00f6tigtes Manifest vom Typ [{}] konnte nicht gefunden werden.
checking_required_tag_file_exists=Pr\\u00fcfe ob alle Tag Dateien vorhanden sind.

#for BagitVersionIsNotAcceptableException.java
bagit_version_not_acceptable_error=Version [{}] ist nicht in der Liste der akzeptieren Versionen {}.

#for RequiredMetadataFieldNotPresentException.java
required_metadata_field_not_present_error=Das im Profil auf\\u00fchrte Metadatum [{}] ist notwendig, wurde aber nicht gefunden\!

#for FetchFileNotAllowedException.java
fetch_file_not_allowed_error=Fetch Datei konnte nicht in der bag [{}] gefunden werden.

#for MetadataValueIsNotAcceptableException.java
metadata_value_not_acceptable_error=Laut Profil sind g\\u00fcltige Werte f\\u00fcr die Eigenschaft [{}]\: {}. Der aufgef\\u00fchrte Wert [{}] befindet sich nicht darunter.

#for MetadataValueIsNotRepeatableException.java
metadata_value_not_repeatable_error=Die ben\\u00f6tigte Tag Datei [{}] konnte nicht gefunden werden.

#for RequiredTagFileNotPresentException.java
required_tag_file_not_found_error=Required tag file [{}] was not found\!

#for EncodingChecker.java
tag_files_not_encoded_with_utf8_warning=Tag files are encoded with [{}]. We recommend always using UTF-8 instead.

#For ManifestChecker.java
bag_missing_tag_manifest_warning=Bag [{}] does not contain a tag manifest, which is always recommended.
different_case_warning=In manifest [{}], path [{}] is the same as another path except for the case. This can cause problems if moving the bag to a filesystem that is case insensitive.
manifest_line_violated_spec_error=Manifest contains line [{}] which does not follow the specified form of <CHECKSUM> <PATH>
md5sum_generated_line_warning=Path [{}] starts with a *, which means it was generated with a non-bagit tool. It is recommended to remove the * in order to conform to the bagit specification.
cannot_access_parent_path_error=Could not access parent folder of [{}].
different_normalization_in_manifest_warning=File [{}] has a different normalization than what is specified in the manifest.
bag_within_bag_warning=We stronger recommend not storing a bag within a bag as it is known to cause problems.
leading_dot_slash_warning=In manifest [{}] line [{}] is a non-normalized path.
os_specific_files_warning=In manifest [{}] line [{}] contains a OS specific file.
weak_algorithm_warning=Detected a known weak algorithm [{}]. With the great advances in computer hardware there is little penalty to using more bits to calculate the checksum.
non_standard_algorithm_warning=Detected algorithm [{}] which is not included by default in Java. This will make it more difficult to read this bag on some systems. Consider changing it to SHA-512.

#for MetadataChecker.java
missing_payload_oxum_warning=The Payload-Oxum key was not found in the bag metadata. This will prevent a "quick verify".

#for VersionChecker.java
old_version_warning=Found version [{}] of the bagit specification but the latest version is [{}].

#for AbstractCreateManifestVistor
skipping_hidden_file=Skipping [{}] since we are ignoring hidden files.
skipping_ignored_directory=Skipping [{}] since we are ignoring hidden directories.

#for BagCreator.java
creating_bag=Creating a bag with version\: [{}] in directory\: [{}].
creating_payload_manifests=Creating payload manifest(s).
creating_tag_manifests=Creating tag manifest(s).
calculating_payload_oxum=Calculating the payload oxum of the data directory [{}].
creating_metadata_file=Creating the bag metadata file (bag-info.txt or package-info.txt).

#for Hasher.java
adding_checksum=Adding [{}] to manifest with hash [{}].

#for UnsupportedAlgorithmException.java
algorithm_not_supported_error=[{}] is not supported\!

#for BagitTextFileReader.java
reading_version_and_encoding=Reading [{}] for version and encoding.
bagit_version=BagIt-Version is [{}].
tag_file_encoding=Tag-File-Character-Encoding is [{}].
invalid_bagit_text_file_error=bagit.txt MUST contain 'BagIt-Version' AND 'Tag-File-Character-Encoding' entries\!
bom_present_error=File [{}] contains a byte order mark (BOM) which is not allowed by the bagit specification\!
strict_only_two_lines_error=The bagit.txt MUST only contain 2 lines. Extra lines found\: [{}]
strict_first_line_error=The first line of the bagit.txt must follow the pattern of\: [BagIt-Version\: <M.N>]. But found instead [{}]. See the specifcation for more information.
strict_second_line_error=The second line of the bagit.txt must follow the pattern of\: [Tag-File-Character-Encoding\: <ENCODING>]. But found instead [{}]. See the specifcation for more information.

#for UnparsableVersionException.java
unparsable_version_error=Version must be in format MAJOR.MINOR but was [{}]\!

#for FetchReader.java
reading_fetch_file=Attempting to read [{}].
read_fetch_file_line=Read URL [{}] length [{}] path [{}] from fetch file [{}].
invalid_fetch_file_line_error=The line [{}] is invalid for fetch.txt. Each line must take the form of <URL> <LENGTH> <FILENAME>.

#for KeyValueReader.java
read_key_value_line=Found key [{}] value [{}] in file [{}] using split regex [{}].
found_indented_line=Found an indented line - merging it with key [{}].
malformed_key_value_line_error=Line [{}] does not meet the bagit specification for a bag tag file. Perhaps you meant to indent it by a space or a tab? Or perhaps you didn't use a colon to separate the key from the value? It must follow the form of <key>{}<value> or if continuing from another line must be indented by a space or a tab.

#for ManifestReader.java
attempting_read_manifests=Attempting to find and read manifests.
found_tagmanifest=Found tag manifest [{}].
found_payload_manifest=Found payload manifest [{}].
reading_manifest=Reading manifest [{}].

#for MetadataReader.java
attempting_read_metadata=Attempting to read bag metadata file.
found_metadata_file=Found metadata file [{}].

#for TagFileReader.java
removing_asterisk=Encountered path that was created by non-bagit tool. Removing * from path. Please remove all * from manifest files\!
blackslash_used_as_path_separator_error=[{}] is invalid due to the use of the path separator [\\]\!
malicious_path_error=[{}] is trying to be malicious and access a file outside the bag\!
invalid_url_format_error=URL [{}] is invalid\!

#for BagVerifier.java
checking_bag_is_valid=Checking if the bag with root directory [{}] is valid.
checking_payload_checksums=Checking payload manifest(s) checksums.
checking_tag_file_checksums=Checking tag manifest(s) checksums.
checksums_not_matching_error=[{}] errors occured. At least one of the errors is due to hashes not matching.
checking_bag_is_complete=Checking if the bag with root directory [{}] is complete.

#for CheckIfFileExistsTask.java
different_normalization_on_filesystem_warning=File name [{}] has a different normalization than what is contained on the filesystem\!
error_reading_normalized_file=Error while trying to read [{}] to see if any files in that directory match the normalized filename of [{}]\!

#for CheckManifestHashesTask.java
checking_checksums=Checking file [{}] to see if checksum matches [{}].

#for CorruptChecksumException.java
corrupt_checksum_error=File [{}] is suppose to have a [{}] hash of [{}] but was computed [{}].

#for FileCoundAndTotalSizeVisitor.java
file_size_in_bytes=File [{}] has a size of [{}] bytes.

#for MandatoryVerifier.java
checking_fetch_items_exist=Checking if all [{}] items in fetch.txt exist in the [{}] directory.
fetch_item_missing_error=Fetch item [{}] has not been fetched\!
file_should_exist_error=File [{}] should exist but it doesn't\!
checking_payload_directory_exists=Checking if special payload directory exists (only for version 0.97 and earlier).

#for MissingPayloadManifestException.java
missing_payload_manifest_error=Bag does not contain a payload manifest file\!

#for PayloadFileExistsInAllManifestsVistor.java
file_not_in_manifest_error=File [{}] is in the payload directory but isn't listed in manifest manifest-{}.txt\!
file_in_all_manifests=[{}] is in all manifests.
file_not_in_any_manifest_error=File [{}] is in the payload directory but isn't listed in any manifest\!

#for PayloadVerifier.java
all_files_in_manifests=Getting all files listed in the manifest(s).
get_listing_in_manifest=Getting files and checksums listed in [{}].
check_all_files_in_manifests_exist=Checking if all files listed in the manifest(s) exist.
missing_payload_files_error=Manifest(s) contains file(s) {} but they don't exist\!
checking_file_in_at_least_one_manifest=Checking if all payload files (files in [{}] directory) are listed in at least one manifest.
checking_file_in_all_manifests=Checking if all payload files (files in [{}] directory) are listed in all manifests.

#for QuickVerifier.java
found_payload_oxum=Found Payload-Oxum [{}] for bag [{}].
payload_oxum_missing_error=Payload-Oxum does not exist in bag\!
parse_size_in_bytes=Parsing [{}] for the total byte size of the payload oxum.
parse_number_of_files=Parsing [{}] for the number of files to find in the payload directory.
compare_payload_oxums=Supplied payload-oxum\: [{}], Calculated payload-oxum\: [{}.{}], for payload directory [{}].
invalid_total_size_error=Invalid total size. Expected [{}] but calculated [{}]\!
invalid_file_cound_error=Invalid file count. Expected [{}] but found [{}]\!

#for BagitFileWriter.java
write_bagit_file_to_path=Writing bagit.txt file to [{}]
writing_line_to_file=Writing line [{}] to [{}]

#for BagWriter.java
writing_payload_files=Writing payload files.
upsert_payload_oxum=Upserting payload-oxum.
writing_bagit_file=Writing the bagit.txt file.
writing_payload_manifests=Writing the payload manifest(s).
writing_bag_metadata=Writing the bag metadata.
writing_fetch_file=Writing the fetch file.
writing_tag_manifests=Writing the tag manifest(s).

#for FetchWriter.java
writing_fetch_file_to_path=Writing fetch.txt to [{}].

#for ManifestWriter.java
writing_manifest_to_path=Writing manifest to [{}].

#for MetadataWriter.java
writing_metadata_to_path=Writing bag metadata file [{}] to [{}].

#for PayloadWriter.java
writing_payload_file_to_path=Writing payload file [{}] to [{}].
skip_fetch_item_when_writing_payload=Skipping payload file {} because it is in the fetch list.
