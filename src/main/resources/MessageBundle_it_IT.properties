#X-Generator: crowdin.com
#default is English, United States (en_US). This is used to store all messages in bagit-java

#for BagitProfileDeserializer.java
fetch_allowed=Recupero file sono ammessi? [{}]
serialization_allowed=La serializzazione \u00e8\: [{}]
parsing_bagit_profile_info_section=Analisi della sezione BagIt-profilo-Info
identifier=Identificatore \u00e8 [{}]
source_organization=Organizzazione di origine \u00e8 [{}]
contact_name=Contatto-nome \u00e8 [{}]
contact_email=E-mail di contatto \u00e8 [{}]
external_description=Esterno-Descrizione \u00e8 [{}]
version=Versione \u00e8 [{}]
parsing_bag_info=Analisi della sezione di borsa-Info
required_manifest_types=Tipi di manifesto richiesto {}
acceptable_serialization_mime_types=Tipi MIME accettabili di serializzazione sono {}
required_tagmanifest_types=Sono necessari tipi di Tagmanifest {}
tag_files_required=Contrassegnare i file richiesti sono {}
acceptable_bagit_versions=Sono accettabili bagit versioni {}

#for BagitWarning.java
bag_within_a_bag=Una directory di dati pu\u00f2 contenere qualsiasi cosa, compreso un altro sacchetto. Tuttavia sarebbe meglio unire le borse.
different_case=La borsa contiene due file che differiscono solo nel caso. Questo pu\u00f2 causare problemi su un filesystem come quello utilizzato da apple (HFS).
different_normalization=La borsa contiene due file che differiscono solo per la normalizzazione. Ci\u00f2 pu\u00f2 causare verifica mancato su alcuni sistemi e la confusione generale dell'utente.
extra_lines_in_bagit_files=La specifica bagit dice che deve contenere solo 2 linee. Tuttavia, alcune implementazioni hanno deciso di ignorare ci\u00f2 che pu\u00f2 causare problemi di compatibilit\u00e0
leading_dot_slash=Un manifesto elenca tutti i file di dati come relativo alla directory radice di borsa, \u00e8 superfluo specificarlo pertanto con un punto.
non_standard_algorithm=L'algoritmo di checksum utilizzato non vengono fornito con il runtime di Java. \u00c8 consigliabile utilizzare SHA-512.
md5sum_tool_generated_manifest=Il manifesto \u00e8 stato creato utilizzando l'utilit\u00e0 di checksum come quelli contenuti nel pacchetto GNU Coreutils (md5sum, sha1sum, ecc.), denominati collettivamente qui come 'md5sum'. Questo crea lievi differenze nei manifesti generati che possono causare problemi in alcune implementazioni.
missing_tag_manifest=Il manifesto di tag protezioni contro un manifesto di carico utile troncato come pure altri potenziali problemi ed \u00e8 sempre consigliato che essere inclusi.
old_bagit_version=La versione della specifica bagit non \u00e8 dei pi\u00f9 nuovi. Considerare la conversione alla versione pi\u00f9 recente.
os_specific_files=I file creati dal sistema operativo (OS) per il proprio usano. Essi sono non portabile tra versioni del sistema operativo e non devono essere inclusi in qualsiasi manifesto. Thumbs. DB esempi su Windows o. DS_Store su OS X
payload_oxum_missing=Si consiglia di includere sempre il Payload-Oxum nei metadati borsa poich\u00e9 permette per una verifica rapida del' della borsa.
tag_files_encoding=Si consiglia di utilizzare sempre UTF-8.
weak_checksum_algorithm=L'algoritmo di checksum utilizzato \u00e8 noto per essere debole. Raccomandiamo l'uso di SHA-512.

#for BagLinter.java
checking_encoding_problems=Controllo dei problemi di codifica.
checking_latest_version=Controllo della versione pi\u00f9 recente.
checking_manifest_problems=Il controllo si manifesta per problemi.
checking_metadata_problems=Verifica dei metadati della borsa per problemi.
skipping_check_extra_lines=Ignorare il controllo di linee extra nei file Bagit.
checking_extra_lines=Verifica se [{}] contiene pi\u00f9 di 2 righe.
extra_lines_warning=La specifica bagit afferma che il file bagit.txt deve contenere esattamente 2 righe. Tuttavia abbiamo trovato [{}] linee, alcune implementazioni lo ignoreranno ma potrebbero causare problemi di incompatibilit\u00e0 con altri strumenti.

#for BagProfileChecker.java
checking_fetch_file_allowed=Verifica se il file di recupero \u00e8 consentito per la borsa [{}].
checking_metadata_entry_required=Verifica se [{}] \u00e8 richiesto nei metadati della borsa.
check_values_acceptable=Verifica se tutti i valori elencati per [{}] sono accettabili.
check_required_manifests_present=Verifica se sono presenti tutti i manifesti richiesti.
required_tag_manifest_type_not_present=Il tipo manifest del tag richiesto [{}] non era presente. 
required_manifest_type_not_present=Il tipo manifest del tag richiesto [{}] non era presente. 
checking_required_tag_file_exists=Verifica se esistono tutti i tag file richiesti.

#for BagitVersionIsNotAcceptableException.java
bagit_version_not_acceptable_error=La versione [{}] non \u00e8 nell'elenco di {} accettabile.

#for RequiredMetadataFieldNotPresentException.java
required_metadata_field_not_present_error=Il profilo specifica il campo dei metadati [{}] \u00e8 richiesto ma non \u00e8 stato trovato\!

#for FetchFileNotAllowedException.java
fetch_file_not_allowed_error=Il file di recupero \u00e8 stato trovato nella borsa [{}]\!

#for MetadataValueIsNotAcceptableException.java
metadata_value_not_acceptable_error=Il profilo specifica che i valori accettabili per [{}] sono {} ma trovati [{}]\!

#for MetadataValueIsNotRepeatableException.java
metadata_value_not_repeatable_error=Il profilo specifica che il valore [{}] non \u00e8 ripetibile, ma \u00e8 stato elencato pi\u00f9 volte\!

#for RequiredTagFileNotPresentException.java
required_tag_file_not_found_error=Il file di tag richiesto [{}] non \u00e8 stato trovato\!

#for EncodingChecker.java
tag_files_not_encoded_with_utf8_warning=I file di tag sono codificati con [{}]. Raccomandiamo sempre di utilizzare UTF-8.

#For ManifestChecker.java
bag_missing_tag_manifest_warning=La borsa [{}] non contiene un tag manifest, che \u00e8 sempre consigliato.
different_case_warning=In manifest [{}], path [{}] is the same as another path except for the case. This can cause problems if moving the bag to a filesystem that is case insensitive.
manifest_line_violated_spec_error=Manifest contains line [{}] which does not follow the specified form of <CHECKSUM> <PATH>
md5sum_generated_line_warning=Path [{}] starts with a *, which means it was generated with a non-bagit tool. It is recommended to remove the * in order to conform to the bagit specification.
cannot_access_parent_path_error=Could not access parent folder of [{}].
different_normalization_in_manifest_warning=File [{}] has a different normalization than what is specified in the manifest.
bag_within_bag_warning=We stronger recommend not storing a bag within a bag as it is known to cause problems.
leading_dot_slash_warning=In manifest [{}] line [{}] is a non-normalized path.
os_specific_files_warning=In manifest [{}] line [{}] contains a OS specific file.
weak_algorithm_warning=Detected a known weak algorithm [{}]. With the great advances in computer hardware there is little penalty to using more bits to calculate the checksum.
non_standard_algorithm_warning=Detected algorithm [{}] which is not included by default in Java. This will make it more difficult to read this bag on some systems. Consider changing it to SHA-512.

#for MetadataChecker.java
missing_payload_oxum_warning=The Payload-Oxum key was not found in the bag metadata. This will prevent a "quick verify".

#for VersionChecker.java
old_version_warning=Found version [{}] of the bagit specification but the latest version is [{}].

#for AbstractCreateManifestVistor
skipping_hidden_file=Skipping [{}] since we are ignoring hidden files.
skipping_ignored_directory=Skipping [{}] since we are ignoring hidden directories.

#for BagCreator.java
creating_bag=Creating a bag with version\: [{}] in directory\: [{}].
creating_payload_manifests=Creating payload manifest(s).
creating_tag_manifests=Creating tag manifest(s).
calculating_payload_oxum=Calculating the payload oxum of the data directory [{}].
creating_metadata_file=Creating the bag metadata file (bag-info.txt or package-info.txt).

#for Hasher.java
adding_checksum=Adding [{}] to manifest with hash [{}].

#for UnsupportedAlgorithmException.java
algorithm_not_supported_error=[{}] is not supported\!

#for BagitTextFileReader.java
reading_version_and_encoding=Reading [{}] for version and encoding.
bagit_version=BagIt-Version is [{}].
tag_file_encoding=Tag-File-Character-Encoding is [{}].
invalid_bagit_text_file_error=bagit.txt MUST contain 'BagIt-Version' AND 'Tag-File-Character-Encoding' entries\!
bom_present_error=File [{}] contains a byte order mark (BOM) which is not allowed by the bagit specification\!
strict_only_two_lines_error=The bagit.txt MUST only contain 2 lines. Extra lines found\: [{}]
strict_first_line_error=The first line of the bagit.txt must follow the pattern of\: [BagIt-Version\: <M.N>]. But found instead [{}]. See the specifcation for more information.
strict_second_line_error=The second line of the bagit.txt must follow the pattern of\: [Tag-File-Character-Encoding\: <ENCODING>]. But found instead [{}]. See the specifcation for more information.

#for UnparsableVersionException.java
unparsable_version_error=Version must be in format MAJOR.MINOR but was [{}]\!

#for FetchReader.java
reading_fetch_file=Attempting to read [{}].
read_fetch_file_line=Read URL [{}] length [{}] path [{}] from fetch file [{}].
invalid_fetch_file_line_error=The line [{}] is invalid for fetch.txt. Each line must take the form of <URL> <LENGTH> <FILENAME>.

#for KeyValueReader.java
read_key_value_line=Found key [{}] value [{}] in file [{}] using split regex [{}].
found_indented_line=Found an indented line - merging it with key [{}].
malformed_key_value_line_error=Line [{}] does not meet the bagit specification for a bag tag file. Perhaps you meant to indent it by a space or a tab? Or perhaps you didn't use a colon to separate the key from the value? It must follow the form of <key>{}<value> or if continuing from another line must be indented by a space or a tab.

#for ManifestReader.java
attempting_read_manifests=Attempting to find and read manifests.
found_tagmanifest=Found tag manifest [{}].
found_payload_manifest=Found payload manifest [{}].
reading_manifest=Reading manifest [{}].

#for MetadataReader.java
attempting_read_metadata=Attempting to read bag metadata file.
found_metadata_file=Found metadata file [{}].

#for TagFileReader.java
removing_asterisk=Encountered path that was created by non-bagit tool. Removing * from path. Please remove all * from manifest files\!
blackslash_used_as_path_separator_error=[{}] is invalid due to the use of the path separator [\\]\!
malicious_path_error=[{}] is trying to be malicious and access a file outside the bag\!
invalid_url_format_error=URL [{}] is invalid\!

#for BagVerifier.java
checking_bag_is_valid=Checking if the bag with root directory [{}] is valid.
checking_payload_checksums=Checking payload manifest(s) checksums.
checking_tag_file_checksums=Checking tag manifest(s) checksums.
checksums_not_matching_error=[{}] errors occured. At least one of the errors is due to hashes not matching.
checking_bag_is_complete=Verifica se il bag con la directory root [{}] \u00e8 completo.

#for CheckIfFileExistsTask.java
different_normalization_on_filesystem_warning=Il nome file [{}] ha una diversa normalizzazione rispetto a ci\u00f2 che \u00e8 contenuto nel filesystem\!
error_reading_normalized_file=Errore durante il tentativo di leggere [{}] per vedere se tutti i file in quella directory corrispondono al nome file normalizzato di [{}]\!

#for CheckManifestHashesTask.java
checking_checksums=Verifica del file [{}] per verificare se il checksum corrisponde a [{}].

#for CorruptChecksumException.java
corrupt_checksum_error=Il file [{}] dovrebbe avere un [{}] hash di [{}] ma \u00e8 stato calcolato [{}].

#for FileCoundAndTotalSizeVisitor.java
file_size_in_bytes=Il file [{}] ha una dimensione di [{}] byte.

#for MandatoryVerifier.java
checking_fetch_items_exist=Verifica se tutti gli elementi [{}] in fetch.txt esistono nella directory [{}].
fetch_item_missing_error=L'elemento di recupero [{}] non \u00e8 stato recuperato\!
file_should_exist_error=Il file [{}] dovrebbe esistere ma non lo \u00e8\!
checking_payload_directory_exists=Verifica se esiste una directory di payload speciale (solo per la versione 0.97 e precedenti).

#for MissingPayloadManifestException.java
missing_payload_manifest_error=La borsa non contiene un file manifest payload\!

#for PayloadFileExistsInAllManifestsVistor.java
file_not_in_manifest_error=Il file [{}] si trova nella directory del payload ma non \u00e8 elencato nel manifest manifest - {}. Txt\!
file_in_all_manifests=[{}] \u00e8 in tutti i manifesti.
file_not_in_any_manifest_error=Il file [{}] si trova nella directory del payload ma non \u00e8 elencato in alcun manifest\!

#for PayloadVerifier.java
all_files_in_manifests=Ottenere tutti i file elencati nel manifest (s).
get_listing_in_manifest=Ottenere file e checksum elencati in [{}].
check_all_files_in_manifests_exist=Verifica se esistono tutti i file elencati nel manifest.
missing_payload_files_error=Manifest (s) contiene file (s) {} ma non esistono\!
checking_file_in_at_least_one_manifest=Verifica se tutti i file di payload (file nella directory [{}]) sono elencati in almeno un manifest.
checking_file_in_all_manifests=Verifica se tutti i file di payload (file nella directory [{}]) sono elencati in tutti i manifesti.

#for QuickVerifier.java
found_payload_oxum=Trovato Payload-Oxum [{}] per la borsa [{}].
payload_oxum_missing_error=Payload-Oxum non esiste in borsa\!
parse_size_in_bytes=Analisi [{}] per la dimensione totale del byte dell'ossido di payload.
parse_number_of_files=Analisi [{}] per il numero di file da trovare nella directory del payload.
compare_payload_oxums=Carico utile fornito\: [{}], carico utile calcolato\: [{}. {}], Per la directory del payload [{}].
invalid_total_size_error=Dimensione totale non valida. Previsto [{}] ma calcolato [{}]\!
invalid_file_cound_error=Conteggio file non valido. Previsto [{}] ma trovato [{}]\!

#for BagitFileWriter.java
write_bagit_file_to_path=Scrivi il file bagit.txt su [{}]
writing_line_to_file=Linea di scrittura [{}] a [{}]

#for BagWriter.java
writing_payload_files=Scrivere file di payload.
upsert_payload_oxum=Upserting payload-oxum.
writing_bagit_file=Scrivere il file bagit.txt.
writing_payload_manifests=Scrittura del manifest (i) carico (i).
writing_bag_metadata=Scrivere i metadati della borsa.
writing_fetch_file=Scrivere il file di recupero.
writing_tag_manifests=Scrivere i tag manifest (s).

#for FetchWriter.java
writing_fetch_file_to_path=Scrivi fetch.txt su [{}].

#for ManifestWriter.java
writing_manifest_to_path=Writing manifest to [{}].

#for MetadataWriter.java
writing_metadata_to_path=Writing bag metadata file [{}] to [{}].

#for PayloadWriter.java
writing_payload_file_to_path=Writing payload file [{}] to [{}].
skip_fetch_item_when_writing_payload=Skipping payload file {} because it is in the fetch list.
