#X-Generator: crowdin.com
#default is English, United States (en_US). This is used to store all messages in bagit-java

#for BagitProfileDeserializer.java
fetch_allowed=\u00c4r fetch-filer till\u00e5tna? [{}]
serialization_allowed=Serialisering \u00e4r\: [{}]
parsing_bagit_profile_info_section=Parsing the BagIt-Profile-Info section
identifier=Identifierare \u00e4r [{}]
source_organization=Source-Organization \u00e4r [{}]
contact_name=Contact-Name \u00e4r [{}]
contact_email=Contact-Email \u00e4r [{}]
external_description=External-Description \u00e4r [{}]
version=Version \u00e4r [{}]
parsing_bag_info=Parsing the Bag-Info section
required_manifest_types=Obligatoriska manifest-typer {}
acceptable_serialization_mime_types=Acceptable serialization MIME types are {}
required_tagmanifest_types=Obligatoriska Tag-manifest-typer \u00e4r {}
tag_files_required=Obligatoriska Tag-filer \u00e4r {}
acceptable_bagit_versions=Accepterade bagit-versioner \u00e4r {}

#for BagitWarning.java
bag_within_a_bag=A data directory can contain anything, including another bag. However it would be better to merge the bags together.
different_case=The bag contains two files that differ only in case. This can cause problems on a filesystem like the one used by apple (HFS).
different_normalization=The bag contains two files that differ only in the normalization. This can cause verification to fail on some systems, and general user confusion.
extra_lines_in_bagit_files=The Bagit specification says it must only contain 2 lines. However, some implementations have decided to ignore this which may cause compatibility issues
leading_dot_slash=A manifest lists all data files as relative to the bag root directory, it is superfluous to therefore specify it with a dot.
non_standard_algorithm=The checksum algorithm used does not come standard with the Java runtime. Consider using SHA-512 instead.
md5sum_tool_generated_manifest=The manifest was created using checksum utilities such as those contained in the GNU Coreutils package (md5sum, sha1sum, etc.), collectively referred to here as 'md5sum'. This creates slight differences in generated manifests that can cause problems in some implementations.
missing_tag_manifest=Tag-manifestet skyddar mot ett styckat payload-manifest. Det rekommenderas att alltid inkludera det.
old_bagit_version=Versionen av bagit-specifikationen \u00e4r inte den senaste. \u00d6verv\u00e4g att konvertera till den senaste versionen.
os_specific_files=Filer skapade av operativsystemet (OS) f\u00f6r dess egen skull. Dessa fungerar inte i alla OS-versioner och ska inte inkluderas i n\u00e5got manifest. Exempel\: Thumbs.db eller .DS_Store i OS X
payload_oxum_missing=Det rekommenderas att alltid inkludera Payload-Oxum i bagens metadata eftersom det m\u00f6jligg\u00f6r en 'snabbverifiering' av bagen.
tag_files_encoding=Det rekommenderas att alltid anv\u00e4nda UTF-8.
weak_checksum_algorithm=Algoritmen f\u00f6r checksumman \u00e4r bristf\u00e4llig. Vi rekommenderar anv\u00e4ndning av SHA-512.

#for BagLinter.java
checking_encoding_problems=Letar efter kodproblem.
checking_latest_version=Letar efter senaste versionen.
checking_manifest_problems=Checking manifests for problems.
checking_metadata_problems=Checking bag metadata for problems.
skipping_check_extra_lines=Skipping check for extra lines in bagit files.
checking_extra_lines=Kontrollerar om [{}] inneh\u00e5ller mer \u00e4n 2 rader.
extra_lines_warning=Bagit-specifikationen anger att filen bagit.txt m\u00e5ste best\u00e5 av exakt 2 rader. Vi uppt\u00e4ckte emellertid [{}] rader, vissa implementationer ignorerar detta men det kan orsaka kompatiblitetsproblem med andra verktyg.

#for BagProfileChecker.java
checking_fetch_file_allowed=Checking if the fetch file is allowed for bag [{}].
checking_metadata_entry_required=Checking if [{}] is required in the bag metadata.
check_values_acceptable=Checking if all the values listed for [{}] are acceptable.
check_required_manifests_present=Checking if all the required manifests are present.
required_tag_manifest_type_not_present=Required tag manifest type [{}] was not present. 
required_manifest_type_not_present=Required manifest type [{}] was not present. 
checking_required_tag_file_exists=Kontrollerar om alla obligatoriska m\u00e4rkfiler finns.

#for BagitVersionIsNotAcceptableException.java
bagit_version_not_acceptable_error=Version [{}] is not in the acceptable list of {}.

#for RequiredMetadataFieldNotPresentException.java
required_metadata_field_not_present_error=Profile specifies metadata field [{}] is required but was not found\!

#for FetchFileNotAllowedException.java
fetch_file_not_allowed_error=Fetch-filen kunde inte hittas i bag [{}]\!

#for MetadataValueIsNotAcceptableException.java
metadata_value_not_acceptable_error=Profile specifies that acceptable values for [{}] are {} but found [{}]\!

#for MetadataValueIsNotRepeatableException.java
metadata_value_not_repeatable_error=Profile specifies that value [{}] is not repeatable, but was listed multiple times\!

#for RequiredTagFileNotPresentException.java
required_tag_file_not_found_error=Obligatorisk tag-fil [{}] kunde inte hittas\!

#for EncodingChecker.java
tag_files_not_encoded_with_utf8_warning=Tag-filer \u00e4r kodade med [{}]. Vi rekommenderar att ist\u00e4llet alltid anv\u00e4nda UTF-8.

#For ManifestChecker.java
bag_missing_tag_manifest_warning=Bag [{}] does not contain a tag manifest, which is always recommended.
different_case_warning=In manifest [{}], path [{}] is the same as another path except for the case. This can cause problems if moving the bag to a filesystem that is case insensitive.
manifest_line_violated_spec_error=Manifest contains line [{}] which does not follow the specified form of <CHECKSUM> <PATH>
md5sum_generated_line_warning=Path [{}] starts with a *, which means it was generated with a non-bagit tool. It is recommended to remove the * in order to conform to the Bagit specification.
cannot_access_parent_path_error=Could not access parent folder of [{}].
different_normalization_in_manifest_warning=Filen [{}] har en annan normalisering \u00e4n vad som \u00e4r specificerat i manifestet.
bag_within_bag_warning=Det \u00e4r en stark rekommendation att inte lagra en bag inom en bag d\u00e5 det \u00e4r k\u00e4nt att skapa problem.
leading_dot_slash_warning=In manifest [{}] line [{}] is a non-normalized path.
os_specific_files_warning=In manifest [{}] line [{}] contains a OS specific file.
weak_algorithm_warning=Detected a known weak algorithm [{}]. With the great advances in computer hardware there is little penalty to using more bits to calculate the checksum.
non_standard_algorithm_warning=Detected algorithm [{}] which is not included by default in Java. This will make it more difficult to read this bag on some systems. Consider changing it to SHA-512.

#for MetadataChecker.java
missing_payload_oxum_warning=The Payload-Oxum key was not found in the bag metadata. This will prevent a "quick verify".

#for VersionChecker.java
old_version_warning=Found version [{}] of the Bagit specification but the latest version is [{}].

#for AbstractCreateManifestVistor
skipping_hidden_file=Skipping [{}] since we are ignoring hidden files.
skipping_ignored_directory=Skipping [{}] since we are ignoring hidden directories.

#for BagCreator.java
creating_bag=Creating a bag with version\: [{}] in directory\: [{}].
creating_payload_manifests=Creating payload manifest(s).
creating_tag_manifests=Creating tag manifest(s).
calculating_payload_oxum=Calculating the payload oxum of the data directory [{}].
creating_metadata_file=Creating the bag metadata file (bag-info.txt or package-info.txt).

#for Hasher.java
adding_checksum=Adding [{}] to manifest with hash [{}].

#for UnsupportedAlgorithmException.java
algorithm_not_supported_error=[{}] is not supported\!

#for BagitTextFileReader.java
reading_version_and_encoding=Reading [{}] for version and encoding.
bagit_version=BagIt-Version is [{}].
tag_file_encoding=Tag-File-Character-Encoding is [{}].
invalid_bagit_text_file_error=bagit.txt MUST contain 'BagIt-Version' AND 'Tag-File-Character-Encoding' entries\!
bom_present_error=File [{}] contains a byte order mark (BOM) which is not allowed by the bagit specification\!
strict_only_two_lines_error=The bagit.txt MUST only contain 2 lines. Extra lines found\: [{}]
strict_first_line_error=The first line of the bagit.txt must follow the pattern of\: [BagIt-Version\: <M.N>]. But found instead [{}]. See the specification for more information.
strict_second_line_error=The second line of the bagit.txt must follow the pattern of\: [Tag-File-Character-Encoding\: <ENCODING>]. But found instead [{}]. See the specification for more information.

#for UnparsableVersionException.java
unparsable_version_error=Version must be in format MAJOR.MINOR but was [{}]\!

#for FetchReader.java
reading_fetch_file=Attempting to read [{}].
read_fetch_file_line=Read URL [{}] length [{}] path [{}] from fetch file [{}].
invalid_fetch_file_line_error=The line [{}] is invalid for fetch.txt. Each line must take the form of <URL> <LENGTH> <FILENAME>.

#for KeyValueReader.java
read_key_value_line=Found key [{}] value [{}] in file [{}] using split regex [{}].
found_indented_line=Found an indented line - merging it with key [{}].
malformed_key_value_line_error=Line [{}] does not meet the Bagit specification for a bag tag file. Perhaps you meant to indent it by a space or a tab? Or perhaps you didn't use a colon to separate the key from the value? It must follow the form of <key>{}<value> or if continuing from another line must be indented by a space or a tab.

#for ManifestReader.java
attempting_read_manifests=Attempting to find and read manifests.
found_tagmanifest=Found tag manifest [{}].
found_payload_manifest=Found payload manifest [{}].
reading_manifest=Reading manifest [{}].

#for MetadataReader.java
attempting_read_metadata=Attempting to read bag metadata file.
found_metadata_file=Found metadata file [{}].

#for TagFileReader.java
removing_asterisk=Encountered path that was created by non-bagit tool. Removing * from path. Please remove all * from manifest files\!
blackslash_used_as_path_separator_error=[{}] is invalid due to the use of the path separator [\\]\!
malicious_path_error=[{}] is trying to be malicious and access a file outside the bag\!
invalid_url_format_error=URL [{}] is invalid\!

#for BagVerifier.java
checking_bag_is_valid=Checking if the bag with root directory [{}] is valid.
checking_payload_checksums=Checking payload manifest(s) checksums.
checking_tag_file_checksums=Checking tag manifest(s) checksums.
checksums_not_matching_error=[{}] errors occurred. At least one of the errors is due to hashes not matching.
checking_bag_is_complete=Checking if the bag with root directory [{}] is complete.

#for CheckIfFileExistsTask.java
different_normalization_on_filesystem_warning=File name [{}] has a different normalization than what is contained on the filesystem\!
error_reading_normalized_file=Error while trying to read [{}] to see if any files in that directory match the normalized filename of [{}]\!

#for CheckManifestHashesTask.java
checking_checksums=Checking file [{}] to see if checksum matches [{}].

#for CorruptChecksumException.java
corrupt_checksum_error=File [{}] is suppose to have a [{}] hash of [{}] but was computed [{}].

#for FileCoundAndTotalSizeVisitor.java
file_size_in_bytes=File [{}] has a size of [{}] bytes.

#for MandatoryVerifier.java
checking_fetch_items_exist=Checking if all [{}] items in fetch.txt exist in the [{}] directory.
fetch_item_missing_error=Fetch item [{}] has not been fetched\!
file_should_exist_error=File [{}] should exist but it doesn't\!
checking_payload_directory_exists=Checking if special payload directory exists (only for version 0.97 and earlier).

#for MissingPayloadManifestException.java
missing_payload_manifest_error=Bag does not contain a payload manifest file\!

#for PayloadFileExistsInAllManifestsVistor.java
file_not_in_manifest_error=File [{}] is in the payload directory but isn't listed in manifest manifest-{}.txt\!
file_in_all_manifests=[{}] is in all manifests.
file_not_in_any_manifest_error=File [{}] is in the payload directory but isn't listed in any manifest\!

#for PayloadVerifier.java
all_files_in_manifests=Getting all files listed in the manifest(s).
get_listing_in_manifest=Getting files and checksums listed in [{}].
check_all_files_in_manifests_exist=Checking if all files listed in the manifest(s) exist.
missing_payload_files_error=Manifest(s) contains file(s) {} but they don't exist\!
checking_file_in_at_least_one_manifest=Checking if all payload files (files in [{}] directory) are listed in at least one manifest.
checking_file_in_all_manifests=Checking if all payload files (files in [{}] directory) are listed in all manifests.

#for QuickVerifier.java
found_payload_oxum=Found Payload-Oxum [{}] for bag [{}].
payload_oxum_missing_error=Payload-Oxum does not exist in bag\!
parse_size_in_bytes=Parsing [{}] for the total byte size of the Payload Oxum.
parse_number_of_files=Parsing [{}] for the number of files to find in the payload directory.
compare_payload_oxums=Supplied payload-oxum\: [{}], Calculated Payload-Oxum\: [{}.{}], for payload directory [{}].
invalid_total_size_error=Ogiltlig total storlek. F\u00f6rv\u00e4ntade [{}] men ber\u00e4knade [{}]\!
invalid_file_cound_error=Invalid file count. Expected [{}] but found [{}]\!

#for BagitFileWriter.java
write_bagit_file_to_path=Skriver bagit.txt till [{}]
writing_line_to_file=Skriver rad [{}] till [{}]

#for BagWriter.java
writing_payload_files=Skriver payload-filer.
upsert_payload_oxum=Upserting Payload-Oxum.
writing_bagit_file=Skriver bagit.txt filen.
writing_payload_manifests=Skriver payload-manifest(en).
writing_bag_metadata=Skriver bag-metadatan.
writing_fetch_file=Skriver fetch-fil.
writing_tag_manifests=Skriver tag-manifest(en).

#for FetchWriter.java
writing_fetch_file_to_path=Skriver fetch.txt till [{}].

#for ManifestWriter.java
writing_manifest_to_path=Skriver manifest till [{}].

#for MetadataWriter.java
writing_metadata_to_path=Skriver bag-metadatafil [{}] till [{}].

#for PayloadWriter.java
writing_payload_file_to_path=Skriver payload-fil [{}] till [{}].
skip_fetch_item_when_writing_payload=Skipping payload file {} because it is in the fetch list.

